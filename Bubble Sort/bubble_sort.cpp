#include <iostream>
#include <vector> // чтобы удобно хранить числа в динамическом массиве (векторе)
using namespace std;

// Функция пузырьковой сортировки
void bubble_sort(vector<int>& arr) {
    int n = arr.size(); // n - сколько чисел в списке (векторе)

    // 1. Главный Проход (Внешний цикл)
    for (int i = 0; i < n - 1; i++) {
        // Зачем? Чтобы повторить сравнение соседей НЕСКОЛЬКО РАЗ.
        // Почему n-1 раз? Столько проходов точно хватит, чтобы всё расставить.
        // i - это номер прохода (0, 1, 2, ...)

        // 2. Сравнение Соседей (Внутренний цикл)
        for (int j = 0; j < n - 1 - i; j++) {
            // Зачем? Чтобы пройти ПОЧТИ по всему списку и сравнить каждую пару соседей.
            // j - это индекс места, где мы сейчас смотрим.

            // Почему n-1-i?
            //   n-1: Чтобы не вылезти за границу массива при сравнении arr[j] и arr[j+1].
            //   -i: После каждого ГЛАВНОГО прохода, самый большой элемент уже "всплыл" в конец
            //       и его трогать больше не нужно. Цикл каждый раз сокращается.

            // 3. Главное Сравнение
            if (arr[j] > arr[j + 1]) {
                // Если левый сосед БОЛЬШЕ правого...
                // 4. Обмен местами (swap)
                int temp = arr[j];
                arr[j] = arr[j + 1];
                arr[j + 1] = temp;
                // Теперь элементы поменялись местами
            }
        }
    }
}

int main() {
    // Пример работы
    vector<int> numbers = {5, 1, 4, 2, 8};

    bubble_sort(numbers); // Запускаем сортировку

    // Выведем результат:
    cout << "Отсортированный массив: ";
    for (int num : numbers) {
        cout << num << " ";
    }
    cout << endl;

    return 0;
}
