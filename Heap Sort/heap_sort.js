// Функция для превращения поддерева с корнем i в max-heap
// n - размер кучи (может быть меньше длины всего arr!)
// i - индекс корня поддерева, которое "чиним"
function heapify(arr, n, i) {
    // 1. Находим Индексы
    let largest = i;       // Сначала считаем, что "корень" i и есть самый большой
    let left = 2 * i + 1;  // Индекс левого "ребенка"
    let right = 2 * i + 2; // Индекс правого "ребенка"

    // 2. Ищем Реально Самого Большого среди i, left, right
    // Если левый ребенок существует (в пределах кучи n) И он больше текущего largest...
    if (left < n && arr[left] > arr[largest]) {
        largest = left; // ...то левый ребенок становится кандидатом на "самого большого"
    }

    // Если правый ребенок существует (в пределах кучи n) И он больше текущего largest...
    if (right < n && arr[right] > arr[largest]) {
        largest = right; // ...то правый ребенок становится кандидатом (или перебивает левого)
    }

    // 3. Если Самый Большой НЕ на месте i (т.е. один из детей больше родителя)
    if (largest !== i) {
        // Меняем местами родителя (i) и самого большого ребенка (largest)
        [arr[i], arr[largest]] = [arr[largest], arr[i]];

        // 4. Рекурсивный Вызов для "Пострадавшего" Поддерева
        // После обмена, элемент, который был в i, теперь в largest.
        // Возможно, он нарушает свойство кучи НИЖЕ по дереву.
        heapify(arr, n, largest);
    }
}

// --- Основная функция сортировки ---
function heapSort(arr) {
    let n = arr.length; // Размер всего массива

    // === Шаг 1: Построение Max-Heap ===
    // Начинаем с последнего узла, у которого МОГУТ быть дети.
    for (let i = Math.floor(n / 2) - 1; i >= 0; i--) {
        heapify(arr, n, i); // Превращаем поддерево с корнем i в кучу
    }
    // После этого цикла ВЕСЬ массив arr является Max-Heap.

    // === Шаг 2: Извлечение элементов и Сортировка ===
    for (let i = n - 1; i > 0; i--) {
        // 1. Меняем корень (arr[0], текущий максимум) с последним элементом
        [arr[0], arr[i]] = [arr[i], arr[0]];
        // Теперь максимум arr[i] на своем финальном месте.

        // 2. Восстанавливаем свойство Max-Heap для оставшейся кучи
        heapify(arr, i, 0);
    }
}

// Пример:
let numbers = [12, 11, 13, 5, 6, 7];
heapSort(numbers);
console.log(numbers); // Получаем: [5, 6, 7, 11, 12, 13]
